// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: sales.proto

package sales

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sales_CreateSales_FullMethodName  = "/sales.Sales/CreateSales"
	Sales_GetAllSales_FullMethodName  = "/sales.Sales/GetAllSales"
	Sales_GetSalesById_FullMethodName = "/sales.Sales/GetSalesById"
	Sales_UpdateSales_FullMethodName  = "/sales.Sales/UpdateSales"
	Sales_DeleteSales_FullMethodName  = "/sales.Sales/DeleteSales"
)

// SalesClient is the client API for Sales service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalesClient interface {
	CreateSales(ctx context.Context, in *CreateSalesRequest, opts ...grpc.CallOption) (*CreateSalesResponse, error)
	GetAllSales(ctx context.Context, in *GetAllSalesRequest, opts ...grpc.CallOption) (*GetAllSalesResponse, error)
	GetSalesById(ctx context.Context, in *GetSalesByIdRequest, opts ...grpc.CallOption) (*GetSalesByIdResponse, error)
	UpdateSales(ctx context.Context, in *UpdateSalesRequest, opts ...grpc.CallOption) (*UpdateSalesResponse, error)
	DeleteSales(ctx context.Context, in *DeleteSalesRequest, opts ...grpc.CallOption) (*DeleteSalesResponse, error)
}

type salesClient struct {
	cc grpc.ClientConnInterface
}

func NewSalesClient(cc grpc.ClientConnInterface) SalesClient {
	return &salesClient{cc}
}

func (c *salesClient) CreateSales(ctx context.Context, in *CreateSalesRequest, opts ...grpc.CallOption) (*CreateSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSalesResponse)
	err := c.cc.Invoke(ctx, Sales_CreateSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesClient) GetAllSales(ctx context.Context, in *GetAllSalesRequest, opts ...grpc.CallOption) (*GetAllSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSalesResponse)
	err := c.cc.Invoke(ctx, Sales_GetAllSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesClient) GetSalesById(ctx context.Context, in *GetSalesByIdRequest, opts ...grpc.CallOption) (*GetSalesByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSalesByIdResponse)
	err := c.cc.Invoke(ctx, Sales_GetSalesById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesClient) UpdateSales(ctx context.Context, in *UpdateSalesRequest, opts ...grpc.CallOption) (*UpdateSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSalesResponse)
	err := c.cc.Invoke(ctx, Sales_UpdateSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salesClient) DeleteSales(ctx context.Context, in *DeleteSalesRequest, opts ...grpc.CallOption) (*DeleteSalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSalesResponse)
	err := c.cc.Invoke(ctx, Sales_DeleteSales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalesServer is the server API for Sales service.
// All implementations must embed UnimplementedSalesServer
// for forward compatibility.
type SalesServer interface {
	CreateSales(context.Context, *CreateSalesRequest) (*CreateSalesResponse, error)
	GetAllSales(context.Context, *GetAllSalesRequest) (*GetAllSalesResponse, error)
	GetSalesById(context.Context, *GetSalesByIdRequest) (*GetSalesByIdResponse, error)
	UpdateSales(context.Context, *UpdateSalesRequest) (*UpdateSalesResponse, error)
	DeleteSales(context.Context, *DeleteSalesRequest) (*DeleteSalesResponse, error)
	mustEmbedUnimplementedSalesServer()
}

// UnimplementedSalesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSalesServer struct{}

func (UnimplementedSalesServer) CreateSales(context.Context, *CreateSalesRequest) (*CreateSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSales not implemented")
}
func (UnimplementedSalesServer) GetAllSales(context.Context, *GetAllSalesRequest) (*GetAllSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSales not implemented")
}
func (UnimplementedSalesServer) GetSalesById(context.Context, *GetSalesByIdRequest) (*GetSalesByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesById not implemented")
}
func (UnimplementedSalesServer) UpdateSales(context.Context, *UpdateSalesRequest) (*UpdateSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSales not implemented")
}
func (UnimplementedSalesServer) DeleteSales(context.Context, *DeleteSalesRequest) (*DeleteSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSales not implemented")
}
func (UnimplementedSalesServer) mustEmbedUnimplementedSalesServer() {}
func (UnimplementedSalesServer) testEmbeddedByValue()               {}

// UnsafeSalesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalesServer will
// result in compilation errors.
type UnsafeSalesServer interface {
	mustEmbedUnimplementedSalesServer()
}

func RegisterSalesServer(s grpc.ServiceRegistrar, srv SalesServer) {
	// If the following call pancis, it indicates UnimplementedSalesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sales_ServiceDesc, srv)
}

func _Sales_CreateSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServer).CreateSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sales_CreateSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServer).CreateSales(ctx, req.(*CreateSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sales_GetAllSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServer).GetAllSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sales_GetAllSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServer).GetAllSales(ctx, req.(*GetAllSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sales_GetSalesById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServer).GetSalesById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sales_GetSalesById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServer).GetSalesById(ctx, req.(*GetSalesByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sales_UpdateSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServer).UpdateSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sales_UpdateSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServer).UpdateSales(ctx, req.(*UpdateSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sales_DeleteSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalesServer).DeleteSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sales_DeleteSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalesServer).DeleteSales(ctx, req.(*DeleteSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sales_ServiceDesc is the grpc.ServiceDesc for Sales service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sales_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sales.Sales",
	HandlerType: (*SalesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSales",
			Handler:    _Sales_CreateSales_Handler,
		},
		{
			MethodName: "GetAllSales",
			Handler:    _Sales_GetAllSales_Handler,
		},
		{
			MethodName: "GetSalesById",
			Handler:    _Sales_GetSalesById_Handler,
		},
		{
			MethodName: "UpdateSales",
			Handler:    _Sales_UpdateSales_Handler,
		},
		{
			MethodName: "DeleteSales",
			Handler:    _Sales_DeleteSales_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sales.proto",
}
